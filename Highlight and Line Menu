#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Display configuration for 64x128 SSD1306 OLED
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET -1    // Reset pin (-1 if sharing Arduino reset pin)
#define OLED_ADDR 0x3C   // I2C address of display (0x3C or 0x3D)

#define BTN_UP 2
#define BTN_DOWN 4
#define BTN_SELECT 3

#define MAIN_PAGES 3
#define MENU_ITEMS 3  // Changed to 3 to include Exit option

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// State variables
int currentPage = 0;
int menuSelection = 0;
bool inMenu = false;
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 200;

// Menu items
const char* menuItems[] = {
  "Brightness",
  "About",
  "Exit"          // Added Exit option
};

void setup() {
  // Initialize buttons
  pinMode(BTN_UP, INPUT_PULLUP);
  pinMode(BTN_DOWN, INPUT_PULLUP);
  pinMode(BTN_SELECT, INPUT_PULLUP);

  // Initialize display with the correct I2C address
  if(!display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.display();
}

void loop() {
  if (millis() - lastDebounceTime > debounceDelay) {
    handleButtons();
  }
  
  display.clearDisplay();
  
  if (inMenu) {
    drawMenu();
  } else {
    drawMainPage();
  }
  
  display.display();
}

void handleButtons() {
  if (!digitalRead(BTN_UP)) {
    lastDebounceTime = millis();
    if (inMenu) {
      menuSelection = (menuSelection - 1 + MENU_ITEMS) % MENU_ITEMS;
    } else {
      currentPage = (currentPage - 1 + MAIN_PAGES) % MAIN_PAGES;
    }
  }
  
  if (!digitalRead(BTN_DOWN)) {
    lastDebounceTime = millis();
    if (inMenu) {
      menuSelection = (menuSelection + 1) % MENU_ITEMS;
    } else {
      currentPage = (currentPage + 1) % MAIN_PAGES;
    }
  }
  
  if (!digitalRead(BTN_SELECT)) {
    lastDebounceTime = millis();
    if (inMenu) {
      // Handle menu selection
      switch(menuSelection) {
        case 0: // Brightness
          adjustBrightness();
          break;
        case 1: // About
          showAbout();
          break;
        case 2: // Exit
          inMenu = false;
          currentPage = 0;  // Return to page 1
          break;
      }
    } else {
      inMenu = true;
      menuSelection = 0;  // Reset menu selection when entering menu
    }
  }
}

// Helper function to center text
void drawCenteredText(const char* text, int16_t y, uint8_t textSize) {
  display.setTextSize(textSize);
  int16_t x1, y1;
  uint16_t w, h;
  display.getTextBounds(text, 0, 0, &x1, &y1, &w, &h);
  display.setCursor((SCREEN_WIDTH - w) / 2, y);
  display.print(text);
}

void drawMainPage() {
  char buffer[20];
  
  // Draw centered page indicator
  sprintf(buffer, "Page %d/%d", currentPage + 1, MAIN_PAGES);
  drawCenteredText(buffer, (SCREEN_HEIGHT - 8) / 2, 1);  // 8 is the height of text size 1
}

void drawMenu() {
  // Draw centered menu title
  drawCenteredText("MENU", 0, 1);
  display.drawLine(0, 9, display.width(), 9, SSD1306_WHITE);
  
  // Calculate vertical spacing for centered menu items
  int menuHeight = MENU_ITEMS * 10;  // 10 pixels per item
  int startY = (SCREEN_HEIGHT - menuHeight) / 2;
  
  display.setTextSize(1);
  
  for (int i = 0; i < MENU_ITEMS; i++) {
    int y = startY + (i * 10);
    
    // Draw selection indicator - now full width and filled
    if (i == menuSelection) {
      display.fillRect(0, y - 1, SCREEN_WIDTH, 11, SSD1306_WHITE);
      display.setTextColor(SSD1306_BLACK); // Inverse text color for selected item
    } else {
      display.setTextColor(SSD1306_WHITE); // Normal text color for unselected items
    }
    
    // Get width of menu item text for centering
    int16_t x1, y1;
    uint16_t w, h;
    display.getTextBounds(menuItems[i], 0, 0, &x1, &y1, &w, &h);
    
    // Center the text horizontally
    int x = (SCREEN_WIDTH - w) / 2;
    
    display.setCursor(x, y);
    display.print(menuItems[i]);
  }
  
  // Reset text color to white for other display elements
  display.setTextColor(SSD1306_WHITE);
}

// Placeholder functions for menu items
void adjustBrightness() {
  // Implement brightness adjustment
}

void showAbout() {
  // Show about information
}
